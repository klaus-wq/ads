from linked_list2 import *
import unittest

class LinkedList2Test(unittest.TestCase):

    def test_find(self):
        s_list = LinkedList2()
        self.assertEqual(None, s_list.find(1))
        self.assertEqual(None, s_list.head)
        self.assertEqual(None, s_list.tail)
        n1 = Node(55)
        s_list.add_in_tail(n1)
        self.assertEqual(n1, s_list.find(55))
        self.assertEqual(None, s_list.find(78))
        self.assertEqual(n1, s_list.head)
        self.assertEqual(n1, s_list.tail)
        s_list = LinkedList2()
        s_list.add_in_tail(n1)
        s_list.add_in_tail(Node(78))
        s_list.add_in_tail(Node(45))
        s_list.add_in_tail(Node(178))
        self.assertEqual(None, s_list.find(155))
        self.assertEqual(n1, s_list.find(55))

    def test_find_all(self):
        s_list = LinkedList2()
        self.assertEqual([], s_list.find_all(55))
        self.assertEqual(None, s_list.head)
        self.assertEqual(None, s_list.tail)
        n1 = Node(55)
        s_list.add_in_tail(n1)
        self.assertEqual([n1], s_list.find_all(55))
        self.assertEqual(n1, s_list.head)
        self.assertEqual(n1, s_list.tail)
        s_list = LinkedList2()
        n1 = Node(55)
        n2 = Node(55)
        s_list.add_in_tail(n1)
        s_list.add_in_tail(Node(78))
        s_list.add_in_tail(Node(45))
        s_list.add_in_tail(Node(178))
        s_list.add_in_tail(n2)
        self.assertEqual([n1, n2], s_list.find_all(55))
        self.assertEqual(n1, s_list.head)
        self.assertEqual(n2, s_list.tail)

    def test_delete(self):
        s_list = LinkedList2()
        s_list.delete(55)
        self.assertEqual(0, s_list.len())
        self.assertEqual(None, s_list.head)
        self.assertEqual(None, s_list.tail)
        n1 = Node(78)
        s_list.add_in_tail(n1)
        s_list.delete(55)
        self.assertEqual(1, s_list.len())
        self.assertEqual(n1, s_list.head)
        self.assertEqual(n1, s_list.tail)
        s_list.delete(78)
        self.assertEqual(0, s_list.len())
        self.assertEqual(None, s_list.head)
        self.assertEqual(None, s_list.tail)
        n1 = Node(55)
        n2 = Node(56)
        s_list.add_in_tail(n1)
        s_list.add_in_tail(Node(78))
        s_list.add_in_tail(Node(34))
        s_list.add_in_tail(n2)
        s_list.delete(34)
        self.assertEqual(s_list.len(), 3)
        self.assertEqual(n1, s_list.head)
        self.assertEqual(n2, s_list.tail)
        s_list.add_in_tail(Node(78))
        s_list.delete(78, True)
        s_list.print_all_nodes()
        self.assertEqual(2, s_list.len())
        s_list = LinkedList2()
        n1 = Node(34)
        n2 = Node(78)
        s_list.add_in_tail(Node(79))
        s_list.add_in_tail(n2)
        s_list.add_in_tail(Node(78))
        s_list.add_in_tail(Node(34))
        s_list.add_in_tail(n1)
        s_list.delete(55)
        self.assertEqual(n1, s_list.tail)
        s_list.delete(79)
        self.assertEqual(n2, s_list.head)

    def test_clean(self):
        s_list = LinkedList2()
        s_list.add_in_tail(Node(10))
        s_list.add_in_tail(Node(55))
        s_list.add_in_tail(Node(45))
        s_list.clean()
        self.assertEqual(s_list.head, None)
        self.assertEqual(s_list.tail, None)

    def test_len(self):
        s_list = LinkedList2()
        self.assertEqual(s_list.len(), 0)
        s_list.add_in_tail(Node(10))
        s_list.add_in_tail(Node(55))
        s_list.add_in_tail(Node(45))
        self.assertEqual(s_list.len(), 3)

    def test_insert(self):
        s_list = LinkedList2()
        n1 = Node(55)
        s_list.insert(None, n1)
        self.assertEqual(n1, s_list.head)
        self.assertEqual(n1, s_list.tail)
        s_list = LinkedList2()
        n1 = Node(55)
        s_list.insert(None, n1)
        self.assertEqual(n1, s_list.head)
        n2 = Node(78)
        s_list.insert(None, n2)
        self.assertEqual(n2, s_list.tail)
        s_list = LinkedList2()
        n4 = Node(45)
        n3 = Node(346)
        s_list.add_in_tail(n3)
        s_list.add_in_tail(Node(34))
        s_list.add_in_tail(Node(55))
        s_list.add_in_tail(Node(34))
        s_list.add_in_tail(n2)
        s_list.insert(Node(34), n4)
        self.assertEqual(n3, s_list.head)
        self.assertEqual(n2, s_list.tail)
        s_list.insert(Node(14), Node(60))
        self.assertEqual(n2, s_list.tail)
        self.assertEqual(n3, s_list.head)
        n5 = Node(79)
        s_list.insert(None, n5)
        self.assertEqual(s_list.tail, n5)
        self.assertEqual(s_list.tail.prev, n2)
        n6 = Node(80)
        s_list.insert(s_list.tail, n6)
        s_list = LinkedList2()
        n7 = Node(55)
        n8 = Node(56)
        s_list.add_in_tail(n7)
        s_list.insert(Node(90), n7)
        self.assertEqual(s_list.tail, n7)
        self.assertEqual(s_list.head, n7)
        s_list.insert(None, n8)
        self.assertEqual(n8, s_list.tail)
        self.assertEqual(n7, s_list.head)
        s_list.clean()
        s_list.add_in_tail(n7)
        s_list.insert(n7, n8)
        self.assertEqual(n8, s_list.tail)
        self.assertEqual(n7, s_list.head)

    def test_add_in_head(self):
        s_list = LinkedList2()
        n1 = Node(55)
        s_list.add_in_head(n1)
        self.assertEqual(n1, s_list.head)
        self.assertEqual(n1, s_list.tail)
        self.assertEqual(None, s_list.tail.next)
        self.assertEqual(None, s_list.tail.prev)
        self.assertEqual(None, s_list.head.next)
        self.assertEqual(None, s_list.head.prev)
        n2 = Node(60)
        s_list.add_in_head(n2)
        self.assertEqual(n2, s_list.head)
        self.assertEqual(n1, s_list.tail)
        self.assertEqual(n1, s_list.head.next)
        self.assertEqual(None, s_list.head.prev)
        self.assertEqual(n2, s_list.tail.prev)
        self.assertEqual(None, s_list.tail.next)
        n3 = Node(78)
        s_list.add_in_head(n3)
        self.assertEqual(n3, s_list.head)
        self.assertEqual(None, s_list.head.prev)
        self.assertEqual(n2, s_list.head.next)
        self.assertEqual(n1, s_list.tail)